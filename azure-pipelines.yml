# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

# name controls the Build.BuildNumber variable
# We'll use the BuildNumber as the final two components of our app's version number
#
# App version number componnents can only be 5 digits or the build fails
# So we'll design a number using a 2 digit year and 3 digit day of year
# 
# NOTE: The documentation isn't clear if DayOfYear is always three digits, so
# we'll need to watch this.
#
# NOTE: A two-digit year is less than ideal, but we find ourselves in year 20
# and it's unlikely this will be around in 80 more years
name: $(Year:yy)$(DayOfYear).$(Rev:r)

trigger:
  branches:
    include:
      - master
      - develop
  tags:
    include:
      - "v*"

pool:
  vmImage: 'windows-latest'

variables:
# must be created in the azure UI under Pipelines > Library and specify accessKey, secretKey, region, and bucket
- group: 's3-public-bucket-upload'
- name: solution
  value: '**/*.sln'
- name: projects
  value: '**/*proj'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: buildNumSuffix
  value: '.$(Build.BuildNumber)'

stages:
  - stage: build
    jobs:
      - job: build
        steps:
        - task: NuGetToolInstaller@1
        
        - task: NuGetCommand@2
          displayName: "restore solutions"
          inputs:
            restoreSolution: '$(solution)'
        
        - task: NuGetCommand@2
          displayName: "restore projects"
          inputs:
            restoreSolution: '$(projects)'
        
        - task: Bash@3
          displayName: "write build info"
          env:
            BRANCH: $(Build.SourceBranch)
            BRANCH_NAME: $(Build.SourceBranchName)
            COMMIT: $(Build.SourceVersion)
            BUILD_NUM: $(Build.BuildNumber)
          inputs:
            targetType: 'filePath'
            filePath: set-build-info.sh
        
        - task: VSBuild@1
          displayName: "build solutions"
          env:
            VERSIONBUILDCOMPONENT: '$(buildNumSuffix)'
          inputs:
            solution: '$(solution)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        
        - task: VSTest@2
          displayName: "execute tests"
          inputs:
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        
        - task: VSBuild@1
          displayName: "build x64 installer"
          env:
            VERSIONBUILDCOMPONENT: '$(buildNumSuffix)'
          inputs:
            solution: 'Morphic.Setup\Morphic.Setup.wixproj'
            platform: 'x64'
            configuration: '$(buildConfiguration)'
        
        - publish: $(System.DefaultWorkingDirectory)\Morphic.Setup\bin\Release\x64\MorphicSetup.msi
          displayName: "save x64 installer for later"
          artifact: x64-installer
            
  - stage: upload
    jobs:
      - job: publish_installer
        pool:
          vmImage: "ubuntu-18.04"
        steps:
          # do not checkout code. we only need to upload the published artifact
          - checkout: none
          - download: current
            artifact: x64-installer
          - task: Bash@3
            displayName: "upload MSI to s3"
            env:
              AWS_ACCESS_KEY_ID: $(accessKey)
              AWS_SECRET_ACCESS_KEY: $(secretKey)
              BUCKET: $(bucket)
              AWS_DEFAULT_REGION: $(region)
              BRANCH: $(Build.SourceBranch)
              BRANCH_NAME: $(Build.SourceBranchName)
            inputs:
              targetType: 'inline'
              script: |
                set -e
  
                UPLOAD_NAME=""
                if [[ "${BRANCH_NAME}" == "master" ]]; then
                  UPLOAD_NAME="MorphicSetup.msi"
                fi
                if [[ "${BRANCH_NAME}" == "develop" ]]; then
                  UPLOAD_NAME="MorphicSetup-latest.msi"
                fi
                if [[ "${BRANCH}" == *"tags"* ]]; then
                  UPLOAD_NAME="MorphicSetup-${BRANCH_NAME}.msi"
                fi
  
                if [[ "$UPLOAD_NAME" == "" ]]; then
                  #echo "no client name found. will not publish to s3"
                  #exit 0
                  UPLOAD_NAME="MorphicSetup-test.msi"
                fi
                set -x
  
                #echo "install AWS CLI"
                #sudo apt-get install -y awscli
  
                ls -al ${AGENT_BUILDDIRECTORY}
                aws s3 cp ${AGENT_BUILDDIRECTORY}/x64-installer/MorphicSetup.msi s3://${BUCKET}/win/x64/$UPLOAD_NAME